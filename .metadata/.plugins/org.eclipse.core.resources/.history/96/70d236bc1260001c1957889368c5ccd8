package main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public class Game implements Runnable{
	
	
	
	final int screenWidth = 1000;
	final int screenHeight = 800;
	
	final int desiredFPS = 60;
	long desiredDeltaLoop = (1000*1000*1000)/desiredFPS;
	
	boolean running = true;
	
	JFrame frame;
	Canvas canvas;
	BufferStrategy bufferStrategy;
	
	Player[] players;
	
	public Game(int _nPlayers) {
		
		frame = new JFrame("Yatzy");
		
		JMenuBar menuBar = new JMenuBar();
		frame.add(menuBar);
		JMenu menu = new JMenu();
		menuBar.add(menu);
		JMenuItem m2= new JMenuItem("Reset");
		
		menu.add(m2);
		
		JPanel pane = (JPanel) frame.getContentPane();
		pane.setPreferredSize(new Dimension(screenWidth, screenHeight));
		pane.setLayout(null);
		
		canvas = new Canvas();
		canvas.setBounds(0, 0, screenWidth, screenHeight);
		canvas.setBackground(new Color(0, 50, 0));
		canvas.setIgnoreRepaint(true);
		
		//canvas.addMouseListener(new MouseControl(this));
		pane.add(canvas);
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setResizable(false);
		frame.setVisible(true);
		
		canvas.createBufferStrategy(2);
		bufferStrategy = canvas.getBufferStrategy();	
		canvas.requestFocus();
		
		
		JButton throwDice = new JButton("Throw");
		throwDice.setBounds(400, 400, 100, 20);
		frame.add(throwDice);
		
		
		players = new Player[_nPlayers];
		
		for(int i=0; i<_nPlayers; i++) {
			players[i] = new Player("lol");
		}
	}

	   
	   public void run(){
	      
	      long beginLoopTime;
	      long endLoopTime;
	      long currentUpdateTime = System.nanoTime();
	      long lastUpdateTime;
	      long deltaLoop;
	      
	      while(running){
	         beginLoopTime = System.nanoTime();
	         
	         render();
	         
	         lastUpdateTime = currentUpdateTime;
	         currentUpdateTime = System.nanoTime();
	         update((int) ((currentUpdateTime - lastUpdateTime)/(1000*1000)));
	         
	         endLoopTime = System.nanoTime();
	         deltaLoop = endLoopTime - beginLoopTime;
	           
	           if(deltaLoop > desiredDeltaLoop){
	           }else{
	               try{
	                   Thread.sleep((desiredDeltaLoop - deltaLoop)/(1000*1000));
	               }catch(InterruptedException e){
	               }
	           }
	      }
	   }
	   
	   private void update(int deltaTime) {
		
	}


	private void render() {
	      Graphics2D g = (Graphics2D) bufferStrategy.getDrawGraphics();
	      g.clearRect(0, 0, screenWidth, screenHeight);
	      render(g);
	      g.dispose();
	      bufferStrategy.show();
	   }

	private void render(Graphics2D g) {
	      
	      players[0].renderDice(g);
		
	}


	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);
		//System.out.println("Hur många spelare?");
		//int nPlayers = input.nextInt();
		Game g = new Game(1);
		g.run();

	}


}
